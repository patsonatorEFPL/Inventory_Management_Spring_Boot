# Description du Projet

## Architecture en un tiers / deux tiers / trois tiers
- L'application utilise une architecture en trois tiers, séparant la présentation, la logique métier et la gestion des données.

## Architecture d’une application web
- L'application web est structurée autour d'un modèle MVC (Modèle-Vue-Contrôleur) qui facilite la séparation des préoccupations.

## Backend, Frontend (+ langages)
- **Backend** : Java avec Spring Boot, utilisant JPA pour la gestion des données.
- **Frontend** : HTML, CSS, JavaScript avec Thymeleaf pour le rendu des vues.

## Exigences d’un projet informatique
- Les exigences incluent la gestion des commandes, des clients et des articles, ainsi que des fonctionnalités de remboursement et de gestion des stocks.

## Inversion de contrôle
- L'inversion de contrôle est gérée par Spring, permettant de gérer les dépendances via l'injection de dépendances.

## Notion de transaction
- Les transactions sont gérées par Spring, garantissant l'intégrité des données lors des opérations de base de données.

## SGBD
- Utilisation de MySQL comme système de gestion de base de données.

## Couche DAO
- La couche DAO (Data Access Object) est implémentée pour accéder aux données via des interfaces Spring Data JPA.

## Mapping Objet Relationnel (+ avantages)
- Le mapping objet-relationnel est réalisé avec JPA, permettant de mapper les entités Java aux tables de la base de données.
- **Avantages** : simplification des opérations de base de données, réduction du code SQL.

## Hibernate
- Hibernate est utilisé comme implémentation de JPA pour le mapping et la gestion des entités.

## JPA, Spring Data JPA
- JPA (Java Persistence API) est utilisé pour la gestion des données, tandis que Spring Data JPA simplifie l'interaction avec la base de données.

## 2 moyens pour mapper les entités
- Utilisation d'annotations JPA pour le mapping des entités.
- Utilisation de fichiers XML pour définir le mapping (optionnel).

## Spring, Spring Boot
- Spring est le framework de base, tandis que Spring Boot facilite la configuration et le déploiement de l'application.

## IDE
- IntelliJ IDEA est utilisé comme environnement de développement intégré pour le développement Java.

## Architecture MVC + Spring MVC
- L'architecture MVC est mise en œuvre avec Spring MVC, séparant les responsabilités entre le modèle, la vue et le contrôleur.

## Thymeleaf
- Thymeleaf est utilisé comme moteur de template pour le rendu des pages HTML.

## Maven, Gradle
- Maven est utilisé pour la gestion des dépendances et la construction du projet.

## Fichier pom.xml
- Le fichier `pom.xml` contient les dépendances nécessaires pour le projet, ainsi que les configurations de build.

## Bootstrap (+ quelques notions de base)
- Bootstrap est utilisé pour le design et la mise en page responsive de l'application.

## CDN (Réseau de diffusion de contenu)
- Utilisation de CDN pour charger des bibliothèques externes comme Bootstrap.

## Requêtes par noms de méthodes (Spring Data JPA)
- Spring Data JPA permet de créer des requêtes basées sur les noms des méthodes dans les interfaces de repository.

## Requêtes par annotations (Spring Data JPA)
- Utilisation d'annotations comme `@Query` pour définir des requêtes personnalisées dans les interfaces de repository.

## Pouvoir expliquer des lignes de code de l’application Employee
- L'application permet de gérer les commandes, les clients et les articles, avec des fonctionnalités de création, de mise à jour et de suppression, ainsi que des remboursements et des vérifications de stock.
